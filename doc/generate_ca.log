# We are going to create Certificate Authority based on CentOS 7 OS
# openssl configuration file is provided by openssl-libs package and located on
# path /etc/pki/tls/openssl.cnf
# It is also required to install ocspd and nginx packages

1) prepare infrastracture:
cd /etc/pki/CA
# create database index file
:> index.txt
# initialize current serial number
echo '01' > serial

2) read password to variable "capassword"
read -s -p "Password: " capassword
Password:

3) generate Root CA private key (by default it is $dir/private/cakey.pem where
dir is /etc/pki/CA)

openssl genrsa -des3 -passout pass:"$capassword" -out private/cakey.pem 2048 -aes256
chmod 400 private/cakey.pem

4) Before next step it is required to
    * comment out all predefined default values inside "req_distinguished_name"
      section (all fields with "_default" suffix).
    * ensure that inside section "req" parameter "string_mask" is set to value
      "utf8only"
    * inside /etc/pki/tls/openssl.cnf file we should replace whole "v3_ca"
      section with next section:

[ v3_ca ]
keyUsage=critical,digitalSignature,keyCertSign,cRLSign
basicConstraints=critical,CA:TRUE
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer

5) Generate CA root certificate (which in turn is self-signed). 

echo -n -e "DE\n\n\nCompany Inc\nwww.domain.tld\nCompany Web Department Global Root CA\n\n" |
    openssl req -new -x509 -days 3650 -key private/cakey.pem -sha256 -extensions v3_ca -passin pass:"$capassword"  -out cacert.pem

6) generate certificate revocation list (CRL)

echo '01' > crlnumber
openssl ca -passin pass:"$capassword" -keyfile private/cakey.pem -cert cacert.pem -gencrl -out crl.pem

7) In order to create certificate request ensure that:
    * from section "req" remove directive "attributes" and "default_keyfile",
    * remove whole section "req_attributes",
    * uncomment directive "req_extensions" and set it to value "v3_req",
    * replace content of section "v3_req" with next (we do not want to define
      any extensions inside CSR):

[ v3_req ]
subjectKeyIdentifier = hash
basicConstraints = critical, CA:FALSE

8) Generate OCSP certificate request:

openssl genrsa -out /etc/ocspd/private/ocspd_key.pem 2048 -aes256
echo -n -e "DE\n\n\nCompany Inc\n\nCompany Web Department OCSP Responder\n\n" |
    openssl req -sha256 -new -key /etc/ocspd/private/ocspd_key.pem -out /etc/ocspd/private/ocspd_csr.pem

9) In order to create  certificate for OCSP responder add next changes:
    * inside section "policy_match" set parameter "stateOrProvinceName" to
      value "optional",
    * add to /etc/pki/tls/openssl.cnf next section:

[ ocsp_cert ]
subjectKeyIdentifier=hash
authorityKeyIdentifier = keyid,issuer
noCheck = ignored
keyUsage =  critical,digitalSignature
extendedKeyUsage = OCSPSigning

10) generate certificate for OCSP responder:

openssl ca -keyfile private/cakey.pem -cert cacert.pem -extensions ocsp_cert -md sha256 \
    -in /etc/ocspd/private/ocspd_csr.pem -passin pass:"$capassword" -out /etc/ocspd/certs/ocspd_cert.pem

11) Inside OCSPd config (/etc/ocspd/ocspd.conf) ensure that in section
"ocsp_response" directive "ocsp_add_response_certs" is uncommented. It is
required in order to avoid warning like

140439505835936:error:27069076:OCSP routines:OCSP_basic_verify:signer certificate not found:ocsp_vfy.c:85:

on client side. Also it could be fixed on client side with option
"-verify_other CAcert.pem" where CAcert.pem is issuer's CA certificate.
For example:

openssl ocsp -text -issuer gsorganizationvalsha2g2r1.pem -cert www.wikipedia.org.pem -url "http://ocsp2.globalsign.com/gsorganizationvalsha2g2" -header "Host" "ocsp2.globalsign.com"

Into OCSPd config setup next section (replace default one):

[ first_ca ]
# You can have the CRL on a simple file in PEM format
crl_url = file:///etc/pki/CA/crl.pem
# We need the CA certificate for every supported CRL
ca_url  = file:///etc/pki/CA/cacert.pem
# Server Certificate to attach to the response
server_cert = file:///etc/ocspd/certs/ocspd_cert.pem

12) Make OCSP services accessible through HTTP on standard port:
    * Inside nginx config for default port 80 server (/etc/nginx/conf.d/default.conf)
      add next directives:

    set $ocsp  1;
    if ( $request_method != POST ) {
        set $ocsp 0;
    }
    if ( $content_type !~* "application/ocsp-request" ) {
        set $ocsp 0;
    }
    if ($ocsp) {
        rewrite ^ /ocsp break;
    }
    location = /ocsp {
        proxy_pass http://localhost:2560;
    }

    * Create new (or add into existing) file /etc/nginx/conf.d/ca.conf with
      next content:

server {
    listen       80;
    server_name  ocsp.domain.tld;

    location / {
        proxy_pass http://localhost:2560/;
    }

    error_log /var/log/nginx/ocsp.domain.tld.error_log error;
    access_log /var/log/nginx/ocsp.domain.tld.access_log main;
}

    * restart nginx service
    systemcrl restart nginx

13) create home directory for intermediate certificate and initialize all
utility files:

mkdir -p /etc/pki/CA/intermediate/{certs,crl,newcerts,private}
cp -a /etc/pki/tls/openssl.cnf /etc/pki/CA/intermediate

cd /etc/pki/CA/intermediate
:> index.txt
echo '01' > crlnumber
echo '01' > serial

14) in openssl config for IM CA make next changes
    * in section "CA_default" for directive "dir" change value to "/etc/pki/CA/intermediate"

15) create intermediate CA certificate request:

# Specify IM CA password
read -s -p "Password: " impassword

# Generate IM CA private key and certificate request
cd /etc/pki/CA/intermediate
openssl genrsa -des3 -out private/cakey.pem -passout pass:"$impassword"  2048 -aes256
echo -n -e "DE\n\n\nCompany Inc\nwww.domain.tld\nCompany Web Department SHA2 Server CA\n\n" |
    openssl req -config openssl.cnf -sha256 -new -key private/cakey.pem -passin pass:"$impassword" -out certs/cacsr.pem

16) into openssl config for root CA (/etc/pki/tls/openssl.cnf) add next sections:

[ v3_ca_intermediate ]
basicConstraints=critical,CA:TRUE,pathlen:0
keyUsage=critical,keyCertSign,cRLSign
extendedKeyUsage=serverAuth,clientAuth
authorityInfoAccess = OCSP;URI:http://ocsp.domain.tld
crlDistributionPoints=crldp_section
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer

[crldp_section]
fullname=URI:http://crl.domain.tld/crls/comglobal.crl

17) make URL (http://crl.domain.tld/crls/comglobal.crl) accessible:

mkdir -p /var/www/html/crls
openssl crl -in /etc/pki/CA/crl.pem -outform DER -out /var/www/html/crls/comglobal.crl

Create new (or add into existing) file /etc/nginx/conf.d/ca.conf with next
content:

server {
    listen       80;
    server_name  crl.domain.tld;

    location / {
        deny all;
    }

    location /crls/ {
        location ~ \.crl$ {
            root /var/www/html;
            expires 2d;
        }
    }

    error_log /var/log/nginx/crl.domain.tld.com.error_log error;
    access_log /var/log/nginx/crl.domain.tld.access_log main;
}

18) Create intermediate CA certificate:

# sign IM CA with root cert
cd /etc/pki/CA
openssl ca -keyfile private/cakey.pem -passin pass:"$capassword" -cert cacert.pem -extensions v3_ca_intermediate -md sha256 -in intermediate/certs/cacsr.pem -out intermediate/cacert.pem

19) make IM CA accessible through web (we will use URL http://cacerts.domain.tld/comssl.crt):

openssl x509  -in intermediate/cacert.pem -outform DER -out /var/www/html/comssl.crt

Create new (or add into existing) file /etc/nginx/conf.d/ca.conf with next
content:

server {
    listen       80;
    server_name  cacerts.domain.tld;

    location / {
        location ~ \.crt$ {
            root /var/www/html;
            expires 1w;
        }
    }

    error_log /var/log/nginx/cacerts.domain.tld.error_log error;
    access_log /var/log/nginx/cacerts.domain.tld.access_log main;
}

20) Create IM CA revocation list

cd /etc/pki/CA/intermediate
openssl ca -config openssl.cnf -keyfile private/cakey.pem -passin pass:"$impassword" -cert cacert.pem -gencrl -out crl.pem

# we will have URL http://crl.domain.tld/crls/comssl.crl
mkdir -p /var/www/html/crls
openssl crl -in crl.pem -outform DER -out /var/www/html/crls/comssl.crl

21) Create OCSP for IM CA:

# IM OCSP
openssl genrsa -out /etc/ocspd/private/ocspd_key2.pem 2048 -aes256
echo -n -e "DE\n\n\nCompany Inc\n\nCompany Web Department IM CA OCSP Responder\n\n" |
    openssl req -config openssl.cnf -sha256 -new -key /etc/ocspd/private/ocspd_key2.pem -out /etc/ocspd/private/ocspd_csr2.pem
openssl ca -config openssl.cnf -keyfile private/cakey.pem -passin pass:"$impassword" -cert cacert.pem -extensions ocsp_cert -md sha256 -in /etc/ocspd/private/ocspd_csr2.pem -out /etc/ocspd/certs/ocspd_cert2.pem

22) create second instance of ocspd daemon for IM CA:
    * create separate configuration file as a copy of existing
    cp /etc/ocspd/ocspd.conf /etc/ocspd/ocspd_im1.conf
    * run it on port 2561 and change PID file location (section "OCSPD_default",
    directives "port" and "pidfile")
    * use ocspd key/certificate from step 21) (section "OCSPD_default",
      directives "ocspd_key" and "ocspd_certificate")
    * use CRL and CA cartificate from steps 18) and 20) (section "first_ca",
      directives "crl_url" and "ca_url")
    * use OCSP certificate from step 21) also for directive "server_cert" of
      section "first_ca"

Create new (or add into existing) file /etc/nginx/conf.d/ca.conf with next
content:

server {
    listen       80;
    server_name  ocsp2.domain.tld;

    location / {
        proxy_pass http://localhost:2561/;
    }

    error_log /var/log/nginx/ocsp2.domain.tld.error_log error;
    access_log /var/log/nginx/ocsp2.domain.tld.access_log main;
}

Run ocspd daemon:

/usr/sbin/ocspd -d -c /etc/ocspd/ocspd_im1.conf

To check OCSP status:

openssl ocsp -issuer /etc/pki/CA/intermediate/cacert.pem -cert /etc/ocspd/certs/ocspd_cert2.pem -text -url http://ocsp2.domain.tld/ -header "Host" "ocsp2.domain.tld"

23) user certificate for domain rest.api.domain.tld and rtm.api.domain.tld
    * Generate next openssl config (ie file /tmp/tmp.vTIiuFWFwB.cnf)

[ req ]
distinguished_name = req_distinguished_name
string_mask = utf8only
req_extensions = v3_req

[ req_distinguished_name ]
countryName                     = Country Name (2 letter code)
countryName_min                 = 2
countryName_max                 = 2
stateOrProvinceName             = State or Province Name (full name)
localityName                    = Locality Name (eg, city)
0.organizationName              = Organization Name (eg, company)
organizationalUnitName          = Organizational Unit Name (eg, section)
commonName                      = Common Name (eg, your server\'s hostname)
commonName_max                  = 64
emailAddress                    = Email Address
emailAddress_max                = 64

[ v3_req ]
basicConstraints = critical, CA:FALSE
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = "rtm.api.domain.tld"

    * Generate CSR
        cd /etc/pki/CA/intermediate
        openssl genrsa -out private/rest.api.domain.tld.key 2048 -aes256
        echo -n -e "DE\nHessen\nFrankfurt\nCompany Inc\n\nrest.api.domain.tld\n\n" |
            openssl req -config /tmp/tmp.vTIiuFWFwB.cnf -sha256 -new -key private/rest.api.domain.tld.key -out certs/rest.api.domain.tld.csr
    
    * Add next sections into IM CA openssl.cnf file:

[ usr_cert ]
authorityKeyIdentifier=keyid,issuer
keyUsage = critical, digitalSignature, keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth, clientAuth
crlDistributionPoints = usr_crldp_section
basicConstraints = critical, CA:FALSE
authorityInfoAccess = OCSP;URI:http://ocsp2.domain.tld, caIssuers;URI:http://cacerts.domain.tld/comssl.crt

[ usr_crldp_section ]
fullname=URI:http://crl.domain.tld/crls/comssl.crl

    * Sign certificate using IM CA cetificate:

        openssl ca -config openssl.cnf -keyfile private/cakey.pem -passin pass:"$impassword" -cert cacert.pem -extensions usr_cert -md sha256 -in certs/rest.api.domain.tld.csr -out certs/rest.api.domain.tld.pem
    
      Proceed step 20) again
      Restart OCSPd for IM CA

Notes:

http://tools.ietf.org/html/rfc3647

Note: how to revoke certificate generated by CA:
    * revoke:
        openssl ca -keyfile private/cakey.pem -cert cacert.pem -revoke /etc/ocspd/certs/ocspd_cert.pem
    * update CRL:
        openssl ca -passin pass:"$capassword" -keyfile private/cakey.pem -cert cacert.pem -gencrl -out crl.pem
    * restart OCSPd:
        systemctl restart ocspd

Note: check OCSP on localhost:
    * add CA root certificate to trusted store
        cp -a /etc/pki/CA/cacert.pem /etc/pki/ca-trust/source/anchors/fa1dfcd3.pem
        update-ca-trust
    * check cert (OCSP cert as example)
        openssl ocsp -issuer /etc/pki/CA/cacert.pem -cert /etc/ocspd/certs/ocspd_cert.pem -resp_text -url http://localhost:2560

Note: how to rewoke certificate generated by IM CA:
    * revoke:
        openssl ca -config openssl.cnf -keyfile private/cakey.pem -passin pass:"$impassword" -cert cacert.pem -revoke certs/rest.api.domain.tld.pem
    * proceed step 20) again
    * restart OCSPd for IM CA